{"version":3,"sources":["../../src/lib/rows.ts"],"sourcesContent":["// TODO: Booleans should probably be numbers instead (as SQLite does not have booleans.);\n// TODO: check against schema.sql which properties really are \"optional\"\n\nexport interface AttachmentRow {\n    attachmentId?: string;\n    ownerId?: string;\n    role: string;\n    mime: string;\n    title: string;\n    position?: number;\n    blobId?: string;\n    isProtected?: boolean;\n    dateModified?: string;\n    utcDateModified?: string;\n    utcDateScheduledForErasureSince?: string;\n    isDeleted?: boolean;\n    deleteId?: string;\n    contentLength?: number;\n    content?: Buffer | string;\n}\n\nexport interface RevisionRow {\n    revisionId?: string;\n    noteId: string;\n    type: NoteType;\n    mime: string;\n    isProtected?: boolean;\n    title: string;\n    blobId?: string;\n    dateLastEdited?: string;\n    dateCreated: string;\n    utcDateLastEdited?: string;\n    utcDateCreated: string;\n    utcDateModified: string;\n    contentLength?: number;\n}\n\nexport interface RecentNoteRow {\n    noteId: string;\n    notePath: string;\n    utcDateCreated?: string;\n}\n\n/**\n * Database representation of an option.\n *\n * Options are key-value pairs that are used to store information such as user preferences (for example\n * the current theme, sync server information), but also information about the state of the application).\n */\nexport interface OptionRow {\n    /** The name of the option. */\n    name: string;\n    /** The value of the option. */\n    value: string;\n    /** `true` if the value should be synced across multiple instances (e.g. locale) or `false` if it should be local-only (e.g. theme). */\n    isSynced: boolean;\n    utcDateModified?: string;\n}\n\nexport interface EtapiTokenRow {\n    etapiTokenId?: string;\n    name: string;\n    tokenHash: string;\n    utcDateCreated?: string;\n    utcDateModified?: string;\n    isDeleted?: boolean;\n}\n\nexport interface BlobRow {\n    blobId: string;\n    content: string | Buffer;\n    contentLength: number;\n    dateModified: string;\n    utcDateModified: string;\n}\n\nexport type AttributeType = \"label\" | \"relation\" | \"label-definition\" | \"relation-definition\";\n\nexport interface AttributeRow {\n    attributeId?: string;\n    noteId?: string;\n    type: AttributeType;\n    name: string;\n    position?: number | null;\n    value?: string;\n    isInheritable?: boolean;\n    utcDateModified?: string;\n}\n\nexport interface BranchRow {\n    branchId?: string;\n    noteId: string;\n    parentNoteId: string;\n    prefix?: string | null;\n    notePosition?: number | null;\n    isExpanded?: boolean;\n    isDeleted?: boolean;\n    utcDateModified?: string;\n}\n\n/**\n * There are many different Note types, some of which are entirely opaque to the\n * end user. Those types should be used only for checking against, they are\n * not for direct use.\n */\nexport const ALLOWED_NOTE_TYPES = [\n    \"file\",\n    \"image\",\n    \"search\",\n    \"noteMap\",\n    \"launcher\",\n    \"doc\",\n    \"contentWidget\",\n    \"text\",\n    \"relationMap\",\n    \"render\",\n    \"canvas\",\n    \"mermaid\",\n    \"book\",\n    \"webView\",\n    \"code\",\n    \"mindMap\",\n    \"geoMap\"\n] as const;\nexport type NoteType = (typeof ALLOWED_NOTE_TYPES)[number];\n\nexport interface NoteRow {\n    noteId: string;\n    deleteId: string;\n    title: string;\n    type: NoteType;\n    mime: string;\n    isProtected: boolean;\n    isDeleted: boolean;\n    blobId: string;\n    dateCreated: string;\n    dateModified: string;\n    utcDateCreated: string;\n    utcDateModified: string;\n    content?: string | Buffer;\n}\n\nexport interface NoteEmbeddingRow {\n    embedId: string;\n    noteId: string;\n    providerId: string;\n    modelId: string;\n    dimension: number;\n    embedding: Buffer;\n    version: number;\n    dateCreated: string;\n    utcDateCreated: string;\n    dateModified: string;\n    utcDateModified: string;\n}\n"],"names":["ALLOWED_NOTE_TYPES"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,yFAAyF;AACzF,wEAAwE;AAmGxE;;;;CAIC,GACD,OAAO,MAAMA,qBAAqB;IAC9B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH,CAAU"}